// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Prisma 6 uses Node-API engines by default; no binaryTargets needed.
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - stores OAuth user information
model User {
  id        String   @id @default(cuid())
  email     String   @unique // Email must be unique across all users
  name      String?
  username  String?  // Keycloak login username (e.g., student, conservator)
  given_name String? // First/given name
  family_name String? // Last/family name
  middle_name String? // Middle name
  sub       String   @unique // OAuth subject identifier - this is the true unique ID
  sys_admin Boolean  @default(false) // System administrator flag
  lastLoginAt DateTime? // Last successful login timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions Session[]
  // projectAssignments removed; use projectRoles only
  projectRoles ProjectRole[] // User roles per project

  @@map("users")
}


// Role enum - defines user roles (fixed set)
enum RoleEnum {
  admin
  manager
  editor
  viewer
}

// Session model - stores OAuth tokens and session data
model Session {
  id           String   @id @default(cuid())
  userId       String
  accessToken  String   @db.Text
  refreshToken String?  @db.Text
  idToken      String?  @db.Text
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Login/logout audit log
model LoginEvent {
  id          String   @id @default(cuid())
  userSub     String   // OAuth subject
  eventType   String   // 'login' or 'logout'
  userAgent   String?
  ipAddress   String?
  success     Boolean
  sessionId   String?  // Reference to session (if applicable)
  errorMessage String? // Error details for failed attempts
  createdAt   DateTime @default(now())

  @@map("login_events")
}

// Project model - represents projects with assigned users
model Project {
  id          String @id @default(cuid())
  name        String @unique // Project name (e.g., "Marble Head", "Stanford Bunny")
  description String // Project description
  public      Boolean @default(false) // Whether the project is publicly visible
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations - list of users assigned to this project
  // userAssignments removed; use projectRoles only
  projectRoles ProjectRole[] // User roles within this project

  @@map("projects")
}

// Junction table for many-to-many relationship between users and projects


// ProjectRole model - manages user roles within specific projects
model ProjectRole {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      RoleEnum
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Ensure a user can only have one role per project
  @@unique([userId, projectId])
  @@map("project_roles")
}
