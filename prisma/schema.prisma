// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Prisma 6 uses Node-API engines by default; no binaryTargets needed.
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - stores OAuth user information
model User {
  id        String   @id @default(cuid())
  email     String   // Removed @unique - emails can be shared across different OAuth providers
  name      String?
  given_name String? // First/given name
  family_name String? // Last/family name
  middle_name String? // Middle name
  sub       String   @unique // OAuth subject identifier - this is the true unique ID
  roleId    String   @default("viewer") // User role - defaults to viewer
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  role     Role      @relation(fields: [roleId], references: [name])
  sessions Session[]

  @@map("users")
}

// Role model - defines user roles and permissions
model Role {
  id          String @id @default(cuid())
  name        String @unique // admin, manager, editor, viewer
  displayName String // Human-readable name
  description String // Role description
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users User[]

  @@map("roles")
}

// Session model - stores OAuth tokens and session data
model Session {
  id           String   @id @default(cuid())
  userId       String
  accessToken  String   @db.Text
  refreshToken String?  @db.Text
  idToken      String?  @db.Text
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Login/logout audit log
model LoginEvent {
  id          String   @id @default(cuid())
  userSub     String   // OAuth subject
  eventType   String   // 'login' or 'logout'
  userAgent   String?
  ipAddress   String?
  success     Boolean
  sessionId   String?  // Reference to session (if applicable)
  errorMessage String? // Error details for failed attempts
  createdAt   DateTime @default(now())

  @@map("login_events")
}
