services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ocra_min-postgres
    environment:
      POSTGRES_DB: oauth_demo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: ocra_min-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8081:8080"
    volumes:
      - ./keycloak/realm-export:/opt/keycloak/data/import
    command: start-dev --import-realm
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 90s

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: ocra_min-backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/oauth_demo
      PORT: 3002
      SYS_ADMIN_EMAIL: admin@ocra.it  # User with this email gets admin privileges on first login
    ports:
      - "3002:3002"
      - "5555:5555"  # Prisma Studio
    depends_on:
      - postgres
    volumes:
      - ./backend:/app/backend:delegated
      - backend_node_modules:/app/backend/node_modules
      - ./prisma:/app/backend/prisma:ro

  app:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: ocra_min-frontend
    environment:
      PROVIDER_URL: http://localhost:8081
      REALM: demo
      ISSUER: http://localhost:8081/realms/demo
      CLIENT_ID: react-oauth
      REDIRECT_URI: http://localhost:3001
      SCOPE: "openid profile email"
      # Database connection for Prisma
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/oauth_demo"
    ports:
      - "3001:80"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started

volumes:
  postgres_data:
  backend_node_modules:
